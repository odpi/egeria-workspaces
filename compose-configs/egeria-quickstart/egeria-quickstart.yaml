---
# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project


# To run
#   * Ensure Docker is installed and running
#   * Start Egeria Platform stack from the 'coco-lab-docker-compose' folder using:
#     'docker compose -f ./egeria-platform-jupyter-uc-compose.yaml up --build'
#   * Subsequent startups can be performed without the '--build' at the end
#   * Uninstall the containers by issuing 'docker compose -f ./egeria-platform-jupyter-uc-compose.yaml down'
#
# Assumptions:
#   * Ports 9443 and 9192 are available on the host system - these are the default ports for Kafka and Egeria.
#   * Port 8085 is used for the external web server
#   * Port 7888 is used by jupyter server
#   * by default, the jupyter notebooks in the 'workspaces' folder are mounted and available for use by the jupyter notebooks
#   * by default, strict SSL validation is turned off
#
#

services:
  jupyter-hub:
    depends_on:
      egeria-main:
        condition: service_healthy

    image: docker.io/jupyter/scipy-notebook:latest
    container_name: jupyter-work-full
    networks:
      - egeria_network
    ports:
      - 7888:7888
      - 5678:5678

    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "egeria"
      JUPYTER_PORT: "7888"

    build:
      dockerfile: Dockerfile-jupyter
    volumes:
      - ./before-notebook.d:/usr/local/bin/before-notebook.d
      - ../../work:/home/jovyan/work
      - ../../workspaces:/home/jovyan/workspaces
      - ../../exchange/distribution-hub:/home/jovyan/distribution-hub
      - ../../exchange/loading-bay:/home/jovyan/loading-bay
      - ../../exchange/landing-area:/home/jovyan/landing-area
      - ../../exchange/coco-data-lake:/home/jovyan/coco-data-lake
      - ../../exchange/config:/home/jovyan/config

  kafka:
#    image: 'bitnami/kafka:latest'
    image: 'bitnamilegacy/kafka/latest'
    networks:
      - egeria_network
    ports:
      - '9192:9192'
      - '9194:9194'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9193
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9192,CONTROLLER://:9193,EXTERNAL://:9194
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9192,EXTERNAL://localhost:9194
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  # Proxy service for OpenLineage
  proxy:
    build:
      dockerfile: Dockerfile-proxy
    container_name: openlineage-proxy-backend
    depends_on:
      - kafka
    networks:
      - egeria_network
    ports:
      - "6000:6000"
      - "6001:6001"
    environment: #             - MARQUEZ_HTTP_ENDPOINT=http://marquez-api:5050/api/v1/lineage
      - OPENLINEAGE_PROXY_CONFIG=/usr/src/app/proxy.yml
    #             - OPENLINEAGE_PROXY_SOURCE=/usr/src/app/proxy.yml
    volumes:
      - ./usr/src/app/build/libs:/usr/src/app/build/libs
      - ./proxy.yml:/usr/src/app/proxy.yml

  egeria-main:
    depends_on:
      - kafka
    image: 'quay.io/odpi/egeria-platform:latest'
    #        image: 'docker.io/odpi/egeria-platform:stable'
    networks:
      - egeria_network
    ports:
      - '9443:9443'
      - '5005:5005'
    environment:
      - XTDB_ENABLE_BYTEUTILS_SHA1=True
      - XTDB_DISABLE_LIBCRYPTO=True
      - startup.server.list=qs-metadata-store,qs-engine-host,qs-integration-daemon,qs-view-server
      - server.port=9443
    healthcheck:
      test: curl -k -X GET "https://localhost:9443/open-metadata/platform-services/users/garygeeke/server-platform/origin" || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ../../exchange/landing-area:/deployments/landing-area
      - ../../exchange/distribution-hub:/deployments/distribution-hub
      - ../../exchange/distribution-hub/surveys:/deployments/surveys
      - ../../runtime-volumes/egeria-platform-data/logs:/deployments/logs
      - ../../runtime-volumes/egeria-platform-data/data:/deployments/data
      - ../../exchange/loading-bay:/deployments/loading-bay
      - ../../exchange/coco-data-lake:/deployments/coco-data-lake
      - ../../work:/deployments/work
      - ../../runtime-volumes/egeria-platform-data/application.properties:/deployments/application.properties

  postgres:
    image: postgres:17.5-bookworm
#    image: postgres:latest
    container_name: postgres_for_egeria
    restart: always
    networks:
      - egeria_network
    ports:
      - "127.0.0.1:5442:5442"
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: egeria
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
#      - ../../runtime-volumes/egeria-pg:/var/lib/postgresql/data/pgdata
      - egeria_postgres_data:/var/lib/postgresql/data/pgdata
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ../../exchange/coco-data-lake:/var/data/coco-data-lake
      - ../../exchange/treasury-dts-history:/var/data/treasury-dts-history
    command: -p 5442 -c max_connections=1000

  # Define your FastAPI application service
  pyegeria-web:
    build:
      context: ./PyegeriaWebHandler
      dockerfile: ./Dockerfile-fast-api
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    networks:
      - egeria_network
    volumes:
      - ./PyegeriaWebHandler:/app
      - ../../exchange/distribution-hub/dr-egeria-outbox:/dr-egeria-outbox  # Mount the dr-egeria-outbox directory
      - ../../exchange/loading-bay/dr-egeria-inbox:/dr-egeria-inbox
      - ../../exchange/config:/config
# Mount the dr-egeria-inbox directory
#    environment:
      # Pass environment variables to the container
#      - REMOTE_SERVER_BASE_URL=https://host.docker.internal:9443
#      - API_KEY=your_secret_api_key # Example for sensitive data
    depends_on:
      # If your FastAPI app depends on a database, specify it here
      - egeria-main
    # Optional: for development, you might want hot-reloading
#     command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    command: uvicorn pyegeria_handler:app --host 0.0.0.0 --port 8000 --reload --loop asyncio

  apache-web:
    build:
      context: .
      dockerfile: Dockerfile-apache-web
    container_name: web-server
    user: "daemon:daemon"  # Explicitly set the user and group to match httpd.conf
    ports:
      - "8085:8085"  # Map host port 8080 to container port 8080
    networks:
      - egeria_network
    volumes:
      - ../../exchange/distribution-hub/dr-egeria-outbox:/usr/local/apache2/htdocs/dr-egeria-outbox  # Mount the dr-egeria-outbox directory
      - ../../exchange/loading-bay/dr-egeria-inbox:/usr/local/apache2/htdocs/dr-egeria-inbox  # Mount the dr-egeria-inbox directory
      - ./httpd.conf:/usr/local/apache2/conf/httpd.conf  # Use the fixed configuration file
      - ./sites-available/fastapi-proxy.conf:/usr/local/apache2/conf/extra/fastapi-proxy.conf  # Mount the FastAPI proxy vhost file
      - ../../runtime-volumes/apache-web/site:/usr/local/apache2/htdocs # mount site
      - ./markdown-header.html:/usr/local/apache2/conf/markdown-header.html  # Mount the markdown viewer
      - ../../runtime-volumes/apache-web/ErrorLogs:/usr/local/apache2/logs  # Mount the logs directory
      - ../../workspaces/Dr-Egeria-Samples:/usr/local/apache2/htdocs/Dr-Egeria-Samples  # Mount the Dr-Egeria-Samples directory
    depends_on:
      - pyegeria-web
#
# Change external to true and create volumes manually if you wish to persist between runs
#
volumes:
  zookeeper-data:
    external: false
  kafka-data:
    external: false
  egeria_postgres_data: # Define the reusable volume


networks:
  egeria_network:
    driver: bridge
    name: egeria_network
#        external: tru
